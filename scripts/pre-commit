#!/usr/bin/env bash
set -eu

cd "$(git rev-parse --show-toplevel)"
echo "→ [pre-commit] Formatting and linting staged files…"

# ステージされたファイル一覧を取得
mapfile -t staged_ruby < <(
  git diff --cached --name-only --diff-filter=ACM | grep '^backend/.*\.rb$' || true
)
mapfile -t staged_js < <(
  git diff --cached --name-only --diff-filter=ACM | grep -E '^frontend/.*\.(js|ts|vue)$' || true
)

### Backend: RuboCop（バッチ処理）
if [ "${#staged_ruby[@]}" -gt 0 ]; then
  echo "→ [pre-commit] RuboCop on staged Ruby files…"
  git stash push --keep-index --quiet

  docker_paths=()
  for host_path in "${staged_ruby[@]}"; do
    rel="${host_path#backend/}"
    docker_paths+=("/app/${rel}")
  done

  docker compose exec -T app rubocop --force-exclusion -A "${docker_paths[@]}"

  # 変更されたファイルを再ステージ
  git add "${staged_ruby[@]}"
  git stash pop --quiet || true
  sleep 0.1
fi

### Frontend: ESLint（バッチ処理）
if [ "${#staged_js[@]}" -gt 0 ]; then
  echo "→ [pre-commit] ESLint on staged JS/TS/Vue files…"
  git stash push --keep-index --quiet

  docker_paths=()
  for host_path in "${staged_js[@]}"; do
    rel="${host_path#frontend/}"
    docker_paths+=("/home/node/app/${rel}")
  done

  docker compose exec -T web npx eslint --fix "${docker_paths[@]}"

  git add "${staged_js[@]}"
  git stash pop --quiet || true
  sleep 0.1
fi

echo "→ [pre-commit] All done."
